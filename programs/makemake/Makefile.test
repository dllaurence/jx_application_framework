# This file was automatically generated by makemake.
# Do not edit it directly!
# Any changes you make will be silently overwritten.

VAR1=value1
VAR2=value2

# To use this file, first run "makemake" and then run "make".
# (makemake is part of the JX distribution)

# Useful directories

JX_ROOT := ../..

CODEDIR  := .
JCOREDIR := ${JX_ROOT}/include/jcore
REGEXDIR := ${JX_ROOT}/misc/regex

JLIBDIR   := ${JX_ROOT}/lib
ACELIBDIR := ${JX_ROOT}/ACE

# Directories to search for header files

SEARCHDIRS := -I- \
              -I${CODEDIR} \
              -I${JCOREDIR}

# other constants

SCRIPT_FILES := maketouch makecheck
DISTR_FILES  := README LICENSE makemake ${SCRIPT_FILES}

# makemake variables

include ${JX_ROOT}/include/make/jx_constants
include ${JX_ROOT}/include/make/jx_config

DEPENDFLAGS := ${J_COMPILER_DEPEND_FLAGS} \
               ${J_COMPILE_DEBUG} ${J_BUILD_SHARED_LIB} \
               -DJ_MAKE_BINARY_NAME=\"${firstword ${MAKE}}\" \
               -DJ_SHARED_LIB_LINK_OPTION=\"${J_SHARED_LIB_LINK_OPTION}\" \
               ${J_RANLIB_VIA_AR_S} \
               ${SEARCHDIRS}

# make variables

LOADLIBES := ${J_ACE_LIBS} ${J_GCC_LIBS}
LDFLAGS   := 

# JMemoryManager files

ifdef J_ARRAY_NEW_OVERRIDABLE
  JMM_FILES := ${addprefix ${DJ_MM_DIR}/, \
                 jNew.o JMemoryManager.o JMMTable.o JMMArrayTable.o \
                 JMMHashTable.o JMMMonitor.o JMMErrorPrinter.o \
                 JMMRecord.o JArray-JMMRecord.o JHashTable-JMMRecord.o}
else
  JMM_FILES :=
endif

#####

.PHONY : default
default: regex makemake

.PHONY : Makefiles
Makefiles:

#
# libraries we have eaten
#

.PHONY : regex
regex:
	@cd ${REGEXDIR}; ${MAKE} for_jcore

#
# JX source distribution (DISTR_TAR_FILE)
#

SRC_FILE_DIR := ${JX}/programs/makemake

.PHONY : jxsource
jxsource:
	@cd ${J_DISTR_TAR_DIR}; \
     tar -rf ${DISTR_TAR_FILE} ${addprefix ${SRC_FILE_DIR}/, \
             README LICENSE Make.header Make.files Makefile.port \
             ${wildcard *.cc *.h} ${SCRIPT_FILES} }

#
# install binaries
#

.PHONY : jxinstall
jxinstall: makemake
	@strip makemake
	@mv makemake ${JX_INSTALL_ROOT}/
	@chmod a+x ${SCRIPT_FILES}
	@cp ${SCRIPT_FILES} ${JX_INSTALL_ROOT}/

.PHONY : jxuninstall
jxuninstall:
	@${RM} ${addprefix ${JX_INSTALL_ROOT}/, makemake ${SCRIPT_FILES}}

#
# jcc binary distribution (JCC_TAR_DIR)
#

JCC_FILE_DIR := ${JCC_TAR_DIR}/makemake

.PHONY : jccshared
jccshared: debug distr_sub

.PHONY : jccstatic
jccstatic: regex staticACE
	@${RM} makemake
	@${MAKE} "LOADLIBES=-static ${LOADLIBES}" makemake
	@${MAKE} distr_sub

.PHONY : distr_sub
distr_sub:
	@strip makemake
	@mkdir ${JCC_FILE_DIR}
	@cp ${DISTR_FILES} ${JCC_FILE_DIR}/
	@cp Make.header ${JCC_FILE_DIR}/Make.header_sample
	@cp Make.files  ${JCC_FILE_DIR}/Make.files_sample

#
# debugging version
#

DEBUG_LOADLIBES := -L${JLIBDIR} \
                   -Xlinker -Bstatic \
                   ${J_ACE_LIBS} \
                   -Xlinker -Bdynamic \
                   ${J_GCC_LIBS}

.PHONY : debug
debug: regex staticACE
	@${RM} makemake
	@${MAKE} "LOADLIBES=${DEBUG_LOADLIBES}" makemake

.PHONY : staticACE
staticACE:
	@cd ${ACELIBDIR}; ${MAKE} static

#
# personal install
#

.PHONY : jafl
jafl: debug
	@strip makemake
	@mv makemake ${JX_INSTALL_ROOT}/


# This is what makemake added


# test_target_1

test_target_1 :: ${JCOREDIR}/JBooleanIO.o ${JCOREDIR}/jNew.o
  ifeq (${suffix test_target_1}, .a)
	@${RM} $@
	${AR} crs $@ ${filter-out %.a %.so, $^}
  else
  ifeq (${suffix test_target_1}, .so)
	${LINKER} -shared ${LDFLAGS} -o $@ ${filter-out %.a %.so, $^} ${LOADLIBES}
  else
	${LINKER} ${LDFLAGS} -o $@ ${filter-out %.a %.so, $^} ${LOADLIBES}
  endif
  endif

# test_target_2

test_target_2 :: ${JCOREDIR}/jTypes.z
  ifeq (${suffix test_target_2}, .a)
	@${RM} $@
	${AR} crs $@ ${filter-out %.a %.so, $^}
  else
  ifeq (${suffix test_target_2}, .so)
	${LINKER} -shared ${LDFLAGS} -o $@ ${filter-out %.a %.so, $^} ${LOADLIBES}
  else
	${LINKER} ${LDFLAGS} -o $@ ${filter-out %.a %.so, $^} ${LOADLIBES}
  endif
  endif

# test_target_3

test_target_3 :: non_existent.y
  ifeq (${suffix test_target_3}, .a)
	@${RM} $@
	${AR} crs $@ ${filter-out %.a %.so, $^}
  else
  ifeq (${suffix test_target_3}, .so)
	${LINKER} -shared ${LDFLAGS} -o $@ ${filter-out %.a %.so, $^} ${LOADLIBES}
  else
	${LINKER} ${LDFLAGS} -o $@ ${filter-out %.a %.so, $^} ${LOADLIBES}
  endif
  endif

# test_target_4

test_target_4 :: ~/local/stable/latest-JX/include/jcore/JString.o
  ifeq (${suffix test_target_4}, .a)
	@${RM} $@
	${AR} crs $@ ${filter-out %.a %.so, $^}
  else
  ifeq (${suffix test_target_4}, .so)
	${LINKER} -shared ${LDFLAGS} -o $@ ${filter-out %.a %.so, $^} ${LOADLIBES}
  else
	${LINKER} ${LDFLAGS} -o $@ ${filter-out %.a %.so, $^} ${LOADLIBES}
  endif
  endif

# test_target_5

test_target_5 :: HelloWorld.java
	${JAVAC} ${JFLAGS} -classpath ${JPATH}:${filter %.jar %.zip %.class, $^} ${filter-out %.jar %.zip %.class, $^}
  ifeq (${suffix test_target_5}, .jar)
	${JAR} -cf $@ ${filter-out %.jar %.zip, $^}
  else
  ifeq (${suffix test_target_5}, .zip)
	zip $@ ${filter-out %.jar %.zip, $^}
  endif
  endif

# list of all source files

MM_ALL_TARGETS := test_target_1 test_target_2 test_target_3 test_target_4 test_target_5

# target for making everything

.PHONY : all
all: ${MM_ALL_TARGETS}

# target for removing all object files

.PHONY : tidy
tidy::
	@${RM} core HelloWorld.java ${JCOREDIR}/JBooleanIO.o ~/local/stable/latest-JX/include/jcore/JString.o ${JCOREDIR}/jNew.o ${JCOREDIR}/jTypes.z non_existent.y

# target for removing all object files

.PHONY : clean
clean:: tidy
	@${RM} ${MM_ALL_TARGETS}

# list of all source files

MM_ALL_SOURCES := HelloWorld.java ${JCOREDIR}/JBooleanIO.cc ~/local/stable/latest-JX/include/jcore/JString.cc ${JCOREDIR}/jNew.cc ${JCOREDIR}/jTypes.h non_existent.x

# target for checking a source file

CHECKSYNTAXFILE := ${basename ${filter %${CHECKSTRING}, ${MM_ALL_SOURCES}}}

.PHONY : checksyntax
checksyntax:
  ifneq (${CHECKSYNTAXFILE},)
	@${MAKE} ${addsuffix .o, ${CHECKSYNTAXFILE}}
  else
	@echo No target to make ${CHECKSTRING}
  endif


# target for touching appropriate source files

.PHONY : touch
touch::
	@list=$$(grep -l ${TOUCHSTRING} ${MM_ALL_SOURCES}); \
     for file in $$list; do { echo $$file; touch $$file; } done


# from Make.header

# Hi, mom!


# target for calculating dependencies (MAKEMAKE)

.PHONY : jdepend
jdepend:
	@${MAKEMAKE} --depend Makefile.test -- ${DEPENDFLAGS} --  ${JCOREDIR}/JBooleanIO.cc \$${JCOREDIR}/JBooleanIO.o ~/local/stable/latest-JX/include/jcore/JString.cc ~/local/stable/latest-JX/include/jcore/JString.o ${JCOREDIR}/jNew.cc \$${JCOREDIR}/jNew.o ${JCOREDIR}/jTypes.h \$${JCOREDIR}/jTypes.z


# DO NOT DELETE THIS LINE -- makemake depends on it.

${JCOREDIR}/JBooleanIO.o: ../../include/jcore/jAssert.h ../../include/jcore/jNew.h ../../include/jcore/jStreamUtil.h ../../include/jcore/jTypes.h /usr/include/limits.h /usr/include/stdlib.h

/home/mad_hatter/jafl/local/stable/latest-JX/include/jcore/JString.o: ../../include/jcore/JArray.h ../../include/jcore/JBroadcaster.h ../../include/jcore/JCollection.h ../../include/jcore/JIndexRange.h ../../include/jcore/JMinMax.h ../../include/jcore/JMinMax.tmpl ../../include/jcore/JMinMax.tmpls ../../include/jcore/JOrderedSet.h ../../include/jcore/JOrderedSetIterator.h ../../include/jcore/JPtrArray.h ../../include/jcore/JPtrArrayIterator.h ../../include/jcore/JRTTIBase.h ../../include/jcore/JString.h ../../include/jcore/instantiate_template.h ../../include/jcore/jAssert.h ../../include/jcore/jErrno.h ../../include/jcore/jMath.h ../../include/jcore/jNew.h ../../include/jcore/jStreamUtil.h ../../include/jcore/jTypes.h ../../include/jcore/regex.h /usr/include/ctype.h /usr/include/errno.h /usr/include/limits.h /usr/include/math.h /usr/include/stdlib.h /usr/include/string.h /usr/include/sys/types.h

${JCOREDIR}/jNew.o: ../../include/jcore/JArray.h ../../include/jcore/JBroadcaster.h ../../include/jcore/JCollection.h ../../include/jcore/JMMRecord.h ../../include/jcore/JMMTable.h ../../include/jcore/JMemoryManager.h ../../include/jcore/JOrderedSet.h ../../include/jcore/JOrderedSetIterator.h ../../include/jcore/JRTTIBase.h ../../include/jcore/jNew.h ../../include/jcore/jTypes.h /usr/include/limits.h /usr/include/stdlib.h

${JCOREDIR}/jTypes.z: /usr/include/limits.h

